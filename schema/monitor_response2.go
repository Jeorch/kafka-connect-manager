// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     ConnectRequest.avsc
 *     ConnectResponse.avsc
 *     MonitorRequest.avsc
 *     MonitorResponse.avsc
 *     TmAggRequest.avsc
 *     TmAggResponse.avsc
 */

package schema

import (
	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
	"io"
)

type MonitorResponse2 struct {
	JobId         string
	ConnectorName string
	Progress      int64
	Error         string
}

func NewMonitorResponse2Writer(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := &MonitorResponse2{}
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func DeserializeMonitorResponse2(r io.Reader) (*MonitorResponse2, error) {
	t := NewMonitorResponse2()

	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	return t, err
}

func NewMonitorResponse2() *MonitorResponse2 {
	return &MonitorResponse2{}
}

func (r *MonitorResponse2) Schema() string {
	return "{\"fields\":[{\"name\":\"jobId\",\"type\":\"string\"},{\"name\":\"connectorName\",\"type\":\"string\"},{\"name\":\"progress\",\"type\":\"long\"},{\"name\":\"error\",\"type\":\"string\"}],\"name\":\"MonitorResponse2\",\"namespace\":\"com.pharbers.kafka.monitor.schema\",\"type\":\"record\"}"
}

func (r *MonitorResponse2) SchemaName() string {
	return "com.pharbers.kafka.monitor.schema.MonitorResponse2"
}

func (r *MonitorResponse2) Serialize(w io.Writer) error {
	return writeMonitorResponse2(r, w)
}

func (_ *MonitorResponse2) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *MonitorResponse2) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *MonitorResponse2) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *MonitorResponse2) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *MonitorResponse2) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *MonitorResponse2) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *MonitorResponse2) SetString(v string)   { panic("Unsupported operation") }
func (_ *MonitorResponse2) SetUnionElem(v int64) { panic("Unsupported operation") }
func (r *MonitorResponse2) Get(i int) types.Field {
	switch i {
	case 0:
		return (*types.String)(&r.JobId)
	case 1:
		return (*types.String)(&r.ConnectorName)
	case 2:
		return (*types.Long)(&r.Progress)
	case 3:
		return (*types.String)(&r.Error)

	}
	panic("Unknown field index")
}
func (r *MonitorResponse2) SetDefault(i int) {
	switch i {

	}
	panic("Unknown field index")
}
func (_ *MonitorResponse2) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *MonitorResponse2) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *MonitorResponse2) Finalize()                        {}

type MonitorResponse2Reader struct {
	r io.Reader
	p *vm.Program
}

func NewMonitorResponse2Reader(r io.Reader) (*MonitorResponse2Reader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewMonitorResponse2()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &MonitorResponse2Reader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r *MonitorResponse2Reader) Read() (*MonitorResponse2, error) {
	t := NewMonitorResponse2()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
